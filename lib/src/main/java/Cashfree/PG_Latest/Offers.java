/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Cashfree.PG_Latest;

import Cashfree.PG_Latest.utils.HTTPClient;
import Cashfree.PG_Latest.utils.HTTPRequest;
import Cashfree.PG_Latest.utils.JSON;
import Cashfree.PG_Latest.utils.SerializedBody;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.function.Function;
import java.util.stream.Collectors;

public class Offers {
	
	private SDKConfiguration sdkConfiguration;

	public Offers(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Create Offer
     * Use this API to create offers with Cashfree from your backend
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public Cashfree.PG_Latest.models.operations.CreateOfferResponse createOffer(Cashfree.PG_Latest.models.operations.CreateOfferRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = Cashfree.PG_Latest.utils.Utils.generateURL(baseUrl, "/offers");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = Cashfree.PG_Latest.utils.Utils.serializeRequestBody(request, "createOfferBackendRequest", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.Map<String, java.util.List<String>> headers = Cashfree.PG_Latest.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Cashfree.PG_Latest.models.operations.CreateOfferResponse res = new Cashfree.PG_Latest.models.operations.CreateOfferResponse(contentType, httpRes.statusCode()) {{
            offerEntity = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (Cashfree.PG_Latest.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Cashfree.PG_Latest.models.shared.OfferEntity out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Cashfree.PG_Latest.models.shared.OfferEntity.class);
                res.offerEntity = out;
            }
        }

        return res;
    }

    /**
     * Get Offer by ID
     * Use this API to get offer by offer_id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public Cashfree.PG_Latest.models.operations.GetOfferResponse getOffer(Cashfree.PG_Latest.models.operations.GetOfferRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = Cashfree.PG_Latest.utils.Utils.generateURL(Cashfree.PG_Latest.models.operations.GetOfferRequest.class, baseUrl, "/offers/{offer_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.Map<String, java.util.List<String>> headers = Cashfree.PG_Latest.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Cashfree.PG_Latest.models.operations.GetOfferResponse res = new Cashfree.PG_Latest.models.operations.GetOfferResponse(contentType, httpRes.statusCode()) {{
            offerEntity = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (Cashfree.PG_Latest.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Cashfree.PG_Latest.models.shared.OfferEntity out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Cashfree.PG_Latest.models.shared.OfferEntity.class);
                res.offerEntity = out;
            }
        }

        return res;
    }
}