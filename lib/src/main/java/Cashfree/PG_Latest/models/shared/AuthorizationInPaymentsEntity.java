/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Cashfree.PG_Latest.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AuthorizationInPaymentsEntity - The authorization details are present for payments which go through the preauthorization workflow. Or else this parameter will be null.
 */

public class AuthorizationInPaymentsEntity {
    /**
     * One of CAPTURE or VOID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    public AuthorizationInPaymentsEntityAction action;

    public AuthorizationInPaymentsEntity withAction(AuthorizationInPaymentsEntityAction action) {
        this.action = action;
        return this;
    }
    
    /**
     * CAPTURE or VOID reference number based on action 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action_reference")
    public String actionReference;

    public AuthorizationInPaymentsEntity withActionReference(String actionReference) {
        this.actionReference = actionReference;
        return this;
    }
    
    /**
     * Time of action (CAPTURE or VOID)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action_time")
    public String actionTime;

    public AuthorizationInPaymentsEntity withActionTime(String actionTime) {
        this.actionTime = actionTime;
        return this;
    }
    
    /**
     * Approve by time as passed in the authorization request (only for UPI)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approve_by")
    public String approveBy;

    public AuthorizationInPaymentsEntity withApproveBy(String approveBy) {
        this.approveBy = approveBy;
        return this;
    }
    
    /**
     * The captured amount for this authorization request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("captured_amount")
    public Double capturedAmount;

    public AuthorizationInPaymentsEntity withCapturedAmount(Double capturedAmount) {
        this.capturedAmount = capturedAmount;
        return this;
    }
    
    /**
     * End time of this authorization hold (only for UPI)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_time")
    public String endTime;

    public AuthorizationInPaymentsEntity withEndTime(String endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Start time of this authorization hold (only for UPI)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_time")
    public String startTime;

    public AuthorizationInPaymentsEntity withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * One of SUCCESS or PENDING
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public AuthorizationInPaymentsEntityStatus status;

    public AuthorizationInPaymentsEntity withStatus(AuthorizationInPaymentsEntityStatus status) {
        this.status = status;
        return this;
    }
    
    public AuthorizationInPaymentsEntity(){}
}
