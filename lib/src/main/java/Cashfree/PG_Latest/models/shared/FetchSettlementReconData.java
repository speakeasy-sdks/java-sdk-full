/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Cashfree.PG_Latest.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;


public class FetchSettlementReconData {
    /**
     * Other adjustment remarks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adjustment_remarks")
    public String adjustmentRemarks;

    public FetchSettlementReconData withAdjustmentRemarks(String adjustmentRemarks) {
        this.adjustmentRemarks = adjustmentRemarks;
        return this;
    }
    
    /**
     * Cashfree Payments unique ID to identify a payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cf_payment_id")
    public Long cfPaymentId;

    public FetchSettlementReconData withCfPaymentId(Long cfPaymentId) {
        this.cfPaymentId = cfPaymentId;
        return this;
    }
    
    /**
     * Unique ID to identify the settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cf_settlement_id")
    public Long cfSettlementId;

    public FetchSettlementReconData withCfSettlementId(Long cfSettlementId) {
        this.cfSettlementId = cfSettlementId;
        return this;
    }
    
    /**
     * Specifies whether the dispute was closed in favor of the merchant or customer. Possible values - Merchant, Customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closed_in_favor_of")
    public String closedInFavorOf;

    public FetchSettlementReconData withClosedInFavorOf(String closedInFavorOf) {
        this.closedInFavorOf = closedInFavorOf;
        return this;
    }
    
    /**
     * Customer email.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_email")
    public String customerEmail;

    public FetchSettlementReconData withCustomerEmail(String customerEmail) {
        this.customerEmail = customerEmail;
        return this;
    }
    
    /**
     * Customer name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_name")
    public String customerName;

    public FetchSettlementReconData withCustomerName(String customerName) {
        this.customerName = customerName;
        return this;
    }
    
    /**
     * Customer phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_phone")
    public String customerPhone;

    public FetchSettlementReconData withCustomerPhone(String customerPhone) {
        this.customerPhone = customerPhone;
        return this;
    }
    
    /**
     * Category of the dispute - Dispute code and the reason for dispute is shown.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dispute_category")
    public String disputeCategory;

    public FetchSettlementReconData withDisputeCategory(String disputeCategory) {
        this.disputeCategory = disputeCategory;
        return this;
    }
    
    /**
     * Note regarding the dispute.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dispute_note")
    public String disputeNote;

    public FetchSettlementReconData withDisputeNote(String disputeNote) {
        this.disputeNote = disputeNote;
        return this;
    }
    
    /**
     * Date and time when the dispute was resolved.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dispute_resolved_on")
    public String disputeResolvedOn;

    public FetchSettlementReconData withDisputeResolvedOn(String disputeResolvedOn) {
        this.disputeResolvedOn = disputeResolvedOn;
        return this;
    }
    
    /**
     * Recon
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entity")
    public String entity;

    public FetchSettlementReconData withEntity(String entity) {
        this.entity = entity;
        return this;
    }
    
    /**
     * Amount corresponding to the event. Example, refund amount, dispute amount, payment amount, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_amount")
    public Double eventAmount;

    public FetchSettlementReconData withEventAmount(Double eventAmount) {
        this.eventAmount = eventAmount;
        return this;
    }
    
    /**
     * Curreny type - INR.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_currency")
    public String eventCurrency;

    public FetchSettlementReconData withEventCurrency(String eventCurrency) {
        this.eventCurrency = eventCurrency;
        return this;
    }
    
    /**
     * Unique ID associated with the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_id")
    public String eventId;

    public FetchSettlementReconData withEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }
    
    /**
     * Amount that is part of the settlement corresponding to the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_settlement_amount")
    public Double eventSettlementAmount;

    public FetchSettlementReconData withEventSettlementAmount(Double eventSettlementAmount) {
        this.eventSettlementAmount = eventSettlementAmount;
        return this;
    }
    
    /**
     * Status of the event. Example - SUCCESS, FAILED, PENDING, CANCELLED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_status")
    public String eventStatus;

    public FetchSettlementReconData withEventStatus(String eventStatus) {
        this.eventStatus = eventStatus;
        return this;
    }
    
    /**
     * Time associated with the event. Example, transaction time, dispute initiation time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_time")
    public String eventTime;

    public FetchSettlementReconData withEventTime(String eventTime) {
        this.eventTime = eventTime;
        return this;
    }
    
    /**
     * The event type can be PAYMENT, REFUND, REFUND_REVERSAL, DISPUTE, DISPUTE_REVERSAL, CHARGEBACK, CHARGEBACK_REVERSAL, OTHER_ADJUSTMENT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_type")
    public String eventType;

    public FetchSettlementReconData withEventType(String eventType) {
        this.eventType = eventType;
        return this;
    }
    
    /**
     * The amount which was passed at the order creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_amount")
    public Double orderAmount;

    public FetchSettlementReconData withOrderAmount(Double orderAmount) {
        this.orderAmount = orderAmount;
        return this;
    }
    
    /**
     * Unique order ID. Alphanumeric and only '-' and '_' allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_id")
    public String orderId;

    public FetchSettlementReconData withOrderId(String orderId) {
        this.orderId = orderId;
        return this;
    }
    
    /**
     * Payment amount captured.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_amount")
    public Double paymentAmount;

    public FetchSettlementReconData withPaymentAmount(Double paymentAmount) {
        this.paymentAmount = paymentAmount;
        return this;
    }
    
    /**
     * Service charge applicable for the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_service_charge")
    public Double paymentServiceCharge;

    public FetchSettlementReconData withPaymentServiceCharge(Double paymentServiceCharge) {
        this.paymentServiceCharge = paymentServiceCharge;
        return this;
    }
    
    /**
     * Service tax applicable on the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_service_tax")
    public Double paymentServiceTax;

    public FetchSettlementReconData withPaymentServiceTax(Double paymentServiceTax) {
        this.paymentServiceTax = paymentServiceTax;
        return this;
    }
    
    /**
     * Date and time when the payment was initiated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_time")
    public String paymentTime;

    public FetchSettlementReconData withPaymentTime(String paymentTime) {
        this.paymentTime = paymentTime;
        return this;
    }
    
    /**
     * Unique transaction reference number of the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_utr")
    public String paymentUtr;

    public FetchSettlementReconData withPaymentUtr(String paymentUtr) {
        this.paymentUtr = paymentUtr;
        return this;
    }
    
    /**
     * The bank reference number for refund.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund_arn")
    public String refundArn;

    public FetchSettlementReconData withRefundArn(String refundArn) {
        this.refundArn = refundArn;
        return this;
    }
    
    /**
     * An unique ID associated with the refund.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund_id")
    public String refundId;

    public FetchSettlementReconData withRefundId(String refundId) {
        this.refundId = refundId;
        return this;
    }
    
    /**
     * A refund note for your reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund_note")
    public String refundNote;

    public FetchSettlementReconData withRefundNote(String refundNote) {
        this.refundNote = refundNote;
        return this;
    }
    
    /**
     * Date and time when the refund was processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund_processed_at")
    public String refundProcessedAt;

    public FetchSettlementReconData withRefundProcessedAt(String refundProcessedAt) {
        this.refundProcessedAt = refundProcessedAt;
        return this;
    }
    
    /**
     * Indicates if it is CREDIT/DEBIT sale.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sale_type")
    public String saleType;

    public FetchSettlementReconData withSaleType(String saleType) {
        this.saleType = saleType;
        return this;
    }
    
    /**
     * Date and time when the settlement was processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement_date")
    public String settlementDate;

    public FetchSettlementReconData withSettlementDate(String settlementDate) {
        this.settlementDate = settlementDate;
        return this;
    }
    
    /**
     * Unique transaction reference number of the settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement_utr")
    public String settlementUtr;

    public FetchSettlementReconData withSettlementUtr(String settlementUtr) {
        this.settlementUtr = settlementUtr;
        return this;
    }
    
    /**
     * Service charge that is applicable for splitting the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("split_service_charge")
    public Double splitServiceCharge;

    public FetchSettlementReconData withSplitServiceCharge(Double splitServiceCharge) {
        this.splitServiceCharge = splitServiceCharge;
        return this;
    }
    
    /**
     * Service tax applicable for splitting the amount to vendors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("split_service_tax")
    public Double splitServiceTax;

    public FetchSettlementReconData withSplitServiceTax(Double splitServiceTax) {
        this.splitServiceTax = splitServiceTax;
        return this;
    }
    
    /**
     * Vendor commission applicable for this transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vendor_commission")
    public Double vendorCommission;

    public FetchSettlementReconData withVendorCommission(Double vendorCommission) {
        this.vendorCommission = vendorCommission;
        return this;
    }
    
    public FetchSettlementReconData(){}
}
