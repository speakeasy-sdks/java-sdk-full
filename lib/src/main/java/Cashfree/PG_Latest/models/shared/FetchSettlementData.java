/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Cashfree.PG_Latest.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;


public class FetchSettlementData {
    /**
     * Amount that is adjusted from the settlement amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adjustment")
    public Double adjustment;

    public FetchSettlementData withAdjustment(Double adjustment) {
        this.adjustment = adjustment;
        return this;
    }
    
    /**
     * Net amount that is settled after deducting the settlement charges and tax. (Settlement charges and tax is applicable for instant and on demand settlements.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_settled")
    public Double amountSettled;

    public FetchSettlementData withAmountSettled(Double amountSettled) {
        this.amountSettled = amountSettled;
        return this;
    }
    
    /**
     * Unique ID to identify the settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cf_settlement_id")
    public Long cfSettlementId;

    public FetchSettlementData withCfSettlementId(Long cfSettlementId) {
        this.cfSettlementId = cfSettlementId;
        return this;
    }
    
    /**
     * Event type is SETTLEMENT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_type")
    public String eventType;

    public FetchSettlementData withEventType(String eventType) {
        this.eventType = eventType;
        return this;
    }
    
    /**
     * Amount captured.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_amount")
    public Double paymentAmount;

    public FetchSettlementData withPaymentAmount(Double paymentAmount) {
        this.paymentAmount = paymentAmount;
        return this;
    }
    
    /**
     * The start time of time range of settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_from")
    public String paymentFrom;

    public FetchSettlementData withPaymentFrom(String paymentFrom) {
        this.paymentFrom = paymentFrom;
        return this;
    }
    
    /**
     * The end time of time range of settlement
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_till")
    public String paymentTill;

    public FetchSettlementData withPaymentTill(String paymentTill) {
        this.paymentTill = paymentTill;
        return this;
    }
    
    /**
     * Reason for failure.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    public String reason;

    public FetchSettlementData withReason(String reason) {
        this.reason = reason;
        return this;
    }
    
    /**
     * Remarks on the settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remarks")
    public String remarks;

    public FetchSettlementData withRemarks(String remarks) {
        this.remarks = remarks;
        return this;
    }
    
    /**
     * Service charge applicable on settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_charge")
    public Double serviceCharge;

    public FetchSettlementData withServiceCharge(Double serviceCharge) {
        this.serviceCharge = serviceCharge;
        return this;
    }
    
    /**
     * Service tax applicable on settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_tax")
    public Double serviceTax;

    public FetchSettlementData withServiceTax(Double serviceTax) {
        this.serviceTax = serviceTax;
        return this;
    }
    
    /**
     * Settlement tax applicable on settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement_charge")
    public Double settlementCharge;

    public FetchSettlementData withSettlementCharge(Double settlementCharge) {
        this.settlementCharge = settlementCharge;
        return this;
    }
    
    /**
     * Date and time when the settlement was processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement_date")
    public String settlementDate;

    public FetchSettlementData withSettlementDate(String settlementDate) {
        this.settlementDate = settlementDate;
        return this;
    }
    
    /**
     * Settlement initiation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement_initiated_on")
    public String settlementInitiatedOn;

    public FetchSettlementData withSettlementInitiatedOn(String settlementInitiatedOn) {
        this.settlementInitiatedOn = settlementInitiatedOn;
        return this;
    }
    
    /**
     * Settlement charge applicable on settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement_tax")
    public Double settlementTax;

    public FetchSettlementData withSettlementTax(Double settlementTax) {
        this.settlementTax = settlementTax;
        return this;
    }
    
    /**
     * Settlement type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement_type")
    public String settlementType;

    public FetchSettlementData withSettlementType(String settlementType) {
        this.settlementType = settlementType;
        return this;
    }
    
    /**
     * Unique transaction reference number of the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement_utr")
    public String settlementUtr;

    public FetchSettlementData withSettlementUtr(String settlementUtr) {
        this.settlementUtr = settlementUtr;
        return this;
    }
    
    /**
     * Status of the settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public FetchSettlementData withStatus(String status) {
        this.status = status;
        return this;
    }
    
    public FetchSettlementData(){}
}
