/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Cashfree.PG_Latest;

import Cashfree.PG_Latest.utils.HTTPClient;
import Cashfree.PG_Latest.utils.SpeakeasyHTTPClient;

public class PGLatest {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        /**
         * Sandbox server
         */
        "https://sandbox.cashfree.com/pg",
        /**
         * Production server
         */
        "https://api.cashfree.com/pg",
	};
  	
    /**
     * The Authentication API allows merchants to show a native screen and capture OTP on their own page and submit to Cashfree. This feature is only available on request.
     */
    public Authentication authentication;
    public EligibilityAPIs eligibilityAPIs;
    public Offers offers;
    public Orders orders;
    public PaymentLinks paymentLinks;
    public Payments payments;
    public Reconciliation reconciliation;
    public Refunds refunds;
    public Settlements settlements;
    /**
     * Cashfree's token Vault helps you save cards and tokenize them in a PCI complaint manner. We support creation of network tokens which can be used across acquiring banks
     */
    public TokenVault tokenVault;
    /**
     * softPOS' agent and order management system now supported by APIs
     */
    public SoftPOS softPOS;	

	private SDKConfiguration sdkConfiguration;

	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private SDKConfiguration sdkConfiguration = new SDKConfiguration();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.sdkConfiguration.defaultClient = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.sdkConfiguration.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.sdkConfiguration.serverUrl = Cashfree.PG_Latest.utils.Utils.templateUrl(serverUrl, params);
			return this;
		}
		
		/**
		 * Allows the overriding of the default server by index
		 * @param serverIdx The server to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerIndex(int serverIdx) {
			this.sdkConfiguration.serverIdx = serverIdx;
			this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public PGLatest build() throws Exception {
			if (this.sdkConfiguration.defaultClient == null) {
				this.sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
			}
			
			if (this.sdkConfiguration.securityClient == null) {
				this.sdkConfiguration.securityClient = this.sdkConfiguration.defaultClient;
			}
			
			if (this.sdkConfiguration.serverUrl == null || this.sdkConfiguration.serverUrl.isBlank()) {
				this.sdkConfiguration.serverUrl = SERVERS[0];
				this.sdkConfiguration.serverIdx = 0;
			}

			if (this.sdkConfiguration.serverUrl.endsWith("/")) {
				this.sdkConfiguration.serverUrl = this.sdkConfiguration.serverUrl.substring(0, this.sdkConfiguration.serverUrl.length() - 1);
			}
			
			return new PGLatest(this.sdkConfiguration);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private PGLatest(SDKConfiguration sdkConfiguration) throws Exception {
		this.sdkConfiguration = sdkConfiguration;
		
		this.authentication = new Authentication(this.sdkConfiguration);
		
		this.eligibilityAPIs = new EligibilityAPIs(this.sdkConfiguration);
		
		this.offers = new Offers(this.sdkConfiguration);
		
		this.orders = new Orders(this.sdkConfiguration);
		
		this.paymentLinks = new PaymentLinks(this.sdkConfiguration);
		
		this.payments = new Payments(this.sdkConfiguration);
		
		this.reconciliation = new Reconciliation(this.sdkConfiguration);
		
		this.refunds = new Refunds(this.sdkConfiguration);
		
		this.settlements = new Settlements(this.sdkConfiguration);
		
		this.tokenVault = new TokenVault(this.sdkConfiguration);
		
		this.softPOS = new SoftPOS(this.sdkConfiguration);
	}
}